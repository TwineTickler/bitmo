TODO:

1. Create a logging script - DONE

2. determine a method of saving data to a database from python. - DONE
    a. It seems that we have a SQLite instance to use for this. 
    b. https://towardsdatascience.com/yes-python-has-a-built-in-database-heres-how-to-use-it-b3c033f172d3

3. verify connectivity to the coin market cap API - DONE

4. Determine what data is available to us in the endpoints
v1/cryptocurrency/Listings/Latest:
    Name: Bitcoin
    symbol: BTC 
    num_market_pairs: 10209
    date_added: 2010-07-13
    cmc_rank: 1
    last_updated: 2023-05-18T04:27:00.000Z
    infinite_supply: False
    quote
        USD
            price: 27321.xxxxxxxx
            volume_24h: xxxxxx.xxxxxx
            volume_change_24h: 23.23
            'percent_change_1h': -0.15257566, 
            'percent_change_24h': 0.89425865, 
            'percent_change_7d': -0.39709286, 
            'percent_change_30d': -7.3645651, 
            'percent_change_60d': 0.44944957, 
            'percent_change_90d': 14.77258088,
            'market_cap': 529401291138.8631,
            last_updated: '2023-05-18T04:27:00.000Z'
    platform
        ID
        name
        symbol
        slug
        token_address

v2/cryptocurrency/Quotes/Latest:

data on the currency, as well as quote data. (similar to Listings/Latest)

5. Determine what data we could like to use for caluculation:
    price
    percent_change_24h (trading price)
    percent_change_7d  (trading price)
    percent_change_7d  (trading price)
    volume_change_24h
    cmc_rank ------------
    market_cap ---------- These two can both be used for the same thing. CMC rank is just a rank based off market cap
    symbol 
    num_market_pairs     

Listings/Latest -> used to get ALL currencies
Quotes/Latest -> used to get price for a particular currency

* Another idea is that we could also find newly listed Crypto's based off of date_added.

SQL notes:

CREATE TABLE IF NOT EXISTS response_status (
                timestamp NUMERIC,
                error_code INTEGER,
                error_message TEXT,
                elapsed INTEGER,
                credit_count INTEGER,
                endpoint TEXT, <---- which endpoint responded
                insert_date NUMERIC <---- python datetime stamp of insert
)
CREATE TABLE IF NOT EXISTS currency (
                id INTEGER, <--- I believe we can use this as PK if needed
                name TEXT,
                symbol TEXT,
                slug TEXT,
                cmc_rank INTEGER,
                num_market_pairs INTEGER,
                infinite_supply NUMERIC,
                last_updated_cmc NUMERIC, <---- time stamp from CMC response
                last_update NUMERIC, <---- python timestamp
                insert_date NUMERIC <---- python timestamp
)
CREATE TABLE IF NOT EXISTS quote (
                id INTEGER, <--- FK from currency table
                currency_base TEXT, <--- mostly will stay as USD I believe 
                insert_date NUMERIC, <--- python timestamp
                price NUMERIC,
                volume_24h NUMERIC,
                volume_change_24h NUMERIC,
                percent_change_1h NUMERIC,
                percent_change_24h NUMERIC,
                percent_change_7d NUMERIC,
                percent_change_30d NUMERIC,
                percent_change_60d NUMERIC,
                percent_change_90d NUMERIC,
                market_cap NUMERIC,
                market_cap_dominance NUMERIC,
                last_updated_cmc NUMERIC <--- timestamp from cmc
            )

6. Determine algorythm we will use to find suitable currencies.

    a. first lets get ALL of the currencies and put them in a database.
        run in sandbox first to make sure we can get them all, then production to see how many there are (how expensive this will be to run daily)


7. Successfully retrieve that data from sandbox

8. Create a database that can store this data

9. Write the data to the database 


Troubleshooting:

# the following is only used for troubleshooting:
# print(data['status'])
# print(data['data'])
# print('number of currencies is: ' + str(len(data['data'])) + '\n')
# print(str(data['data'][0]) + '\n')
# print(str(data['data'][1]) + '\n')
# print(str(data['data'][2]) + '\n')
# print(str(data['data'][3]) + '\n')
# print(str(data['data'][4]) + '\n')
# print(str(data['data'][5]))

10. test production to see 
    a. that everything saves correctly. - DONE
    b. to see how expensive it is (cmc credits) to download all the listings, once a day.
        - DONE: we can afford to get everything once per day.

11. create some kind of infinite (not really infinite) loop that only runs the downloads once a day.
    - In progress

12. Setup to run once a day.

13. once the downloads are done. create functions to begin looking at trends.